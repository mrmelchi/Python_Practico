{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00a1Bienvenidos! Esta es una versi\u00f3n en Espa\u00f1ol del curso Practical Python Programming A partir de ahora todo es obra de --David Beazley ( https://dabeaz.com ), \\@dabeaz . Cuando aprend\u00ed Python por primera vez hace casi 27 a\u00f1os, me sorprendi\u00f3 de inmediato c\u00f3mo pod\u00eda aplicarlo de manera productiva a todo tipo de proyectos laborales complicados. Una d\u00e9cada despu\u00e9s, me encontr\u00e9 ense\u00f1\u00e1ndoles a otros la misma diversi\u00f3n. El resultado de esa ense\u00f1anza es este curso: un curso de Python que se ha ense\u00f1ado activamente a m\u00e1s de 400 grupos en persona desde 2007. Traders, administradores de sistemas, astr\u00f3nomos, pensadores e incluso unos cientos de cient\u00edficos espaciales que usaron Python para ayudar a aterrizar un rover en Marte, todos han tomado este curso. Ahora, me complace ponerlo a disposici\u00f3n bajo una licencia Creative Commons, completamente libre de spam, registros y otras tonter\u00edas. \u00a1Disfr\u00fatelo! (P.D.: Este curso trata sobre Python. Si quieres un curso de Python que trate sobre programaci\u00f3n, podr\u00edas considerar Programaci\u00f3n avanzada con Python ) \u00bfQu\u00e9 es esto? El material que ves aqu\u00ed es el n\u00facleo de un curso de capacitaci\u00f3n de Python dirigido por un instructor que se utiliza para la capacitaci\u00f3n corporativa y el desarrollo profesional. Estuvo en desarrollo continuo desde 2007 hasta 2019 y se prob\u00f3 en clases del mundo real. Por lo general, se ense\u00f1a en persona durante un per\u00edodo de tres o cuatro d\u00edas, lo que requiere aproximadamente entre 25 y 35 horas de trabajo intenso. Esto incluye la realizaci\u00f3n de aproximadamente 130 ejercicios pr\u00e1cticos de codificaci\u00f3n. P\u00fablico objetivo Los estudiantes de este curso suelen ser cient\u00edficos, ingenieros y programadores profesionales que ya tienen experiencia en al menos otro lenguaje de programaci\u00f3n. No se requieren conocimientos previos de Python, pero se supone que se tienen conocimientos de temas de programaci\u00f3n comunes. La mayor\u00eda de los participantes encuentran el curso desafiante, incluso si ya han estado haciendo un poco de programaci\u00f3n en Python. Objetivos del curso El objetivo de este curso es cubrir los aspectos fundamentales de la programaci\u00f3n en Python con \u00e9nfasis en la escritura de scripts, la manipulaci\u00f3n b\u00e1sica de datos y la organizaci\u00f3n de programas. Al final de este curso, los estudiantes deber\u00edan ser capaces de comenzar a escribir programas \u00fatiles en Python por su cuenta o poder comprender y modificar el c\u00f3digo Python escrito por sus compa\u00f1eros de trabajo. Requisitos Para completar este curso, no necesita nada m\u00e1s que una instalaci\u00f3n b\u00e1sica de Python 3.6 o una versi\u00f3n m\u00e1s reciente y tiempo para trabajar en ella. Qu\u00e9 no es este curso Este no es un curso para principiantes absolutos sobre c\u00f3mo programar una computadora. Se supone que ya tienes experiencia en programaci\u00f3n en alg\u00fan otro lenguaje de programaci\u00f3n o en Python. Este no es un curso sobre desarrollo web. Ese es un circo diferente. Sin embargo, si te quedas para este circo, ver\u00e1s algunos actos interesantes, pero nada que involucre animales. Este no es un curso sobre el uso de herramientas que est\u00e1n escritas en Python. Se trata de aprender el lenguaje Python central. Este no es un curso para ingenieros de software sobre c\u00f3mo escribir o mantener una aplicaci\u00f3n Python de un mill\u00f3n de l\u00edneas. No escribo programas de ese tipo, ni tampoco lo hacen la mayor\u00eda de las empresas que usan Python, y t\u00fa tampoco deber\u00edas hacerlo. \u00a1Elimina algo de una vez! \u00a1Ll\u00e9vame al curso ya! Ok, ok. \u00a1Apunta tu navegador AQU\u00cd ! Discusi\u00f3n de la comunidad \u00bfQuieres debatir sobre el curso? Puedes unirte a la conversaci\u00f3n en Gitter . No puedo prometer una respuesta individual, pero quiz\u00e1s otros puedan sumarse para ayudar. Agradecimientos Lloren\u00e7 Muntaner fue fundamental en la conversi\u00f3n del contenido del curso de Apple Keynote a la estructura en l\u00ednea que ves aqu\u00ed. Varios instructores han presentado este curso en un momento u otro durante los \u00faltimos 12 a\u00f1os. Esto incluye (en orden alfab\u00e9tico): Ned Batchelder, Juan Pablo Claude, Mark Fenner, Michael Foord, Matt Harrison, Raymond Hettinger, Daniel Klein, Travis Oliphant, James Powell, Michael Selik, Hugo Shi, Ian Stokes-Rees, Yarko Tymciurak, Bryan Van de ven, Peter Wang y Mark Wiebe. Tambi\u00e9n me gustar\u00eda agradecer a los miles de estudiantes que han realizado este curso y han contribuido a su \u00e9xito con sus comentarios y discusiones. Preguntas y respuestas P: \u00bfHay videos del curso que pueda ver? No. Este curso se trata de que usted escriba c\u00f3digo Python, no de ver a otra persona. P: \u00bfC\u00f3mo se licencia este curso? Practical Python Programming tiene licencia Creative Commons Attribution ShareAlike 4.0 International License. P: \u00bfPuedo usar este material para ense\u00f1ar mi propio curso de Python? S\u00ed, siempre que se indique la atribuci\u00f3n correspondiente. P: \u00bfPuedo hacer trabajos derivados? S\u00ed, siempre que dichos trabajos tengan los mismos t\u00e9rminos de licencia y proporcionen la atribuci\u00f3n. P: \u00bfPuedo traducir esto a otro idioma? S\u00ed, eso ser\u00eda genial. Env\u00edeme un enlace cuando haya terminado. P: \u00bfPuedo transmitir en vivo el curso o hacer un video? \u00a1S\u00ed, adelante! Probablemente aprender\u00e1s mucho de Python haciendo eso. P: \u00bfPor qu\u00e9 no se cubri\u00f3 el tema X? Hay una cantidad limitada de material que se puede cubrir en 3 o 4 d\u00edas. Si no se cubri\u00f3, probablemente fue porque se cubri\u00f3 una vez y hizo que a todos les explotara la cabeza o nunca hubo tiempo suficiente para cubrirlo en primer lugar. Adem\u00e1s, este es un curso, no un manual de referencia de Python. P: \u00bfPor qu\u00e9 no se cubre el incre\u00edble {command} en el incre\u00edble {tool} ? El enfoque de este curso es aprender el lenguaje Python central, no aprender los nombres de los comandos en las herramientas. P: \u00bfEste curso se mantiene o se actualiza? Este curso representa un \"producto terminado\" que se ense\u00f1\u00f3 y desarroll\u00f3 durante m\u00e1s de una d\u00e9cada. No tengo planes de revisar significativamente el material en este momento, pero ocasionalmente corregir\u00e9 errores y agregar\u00e9 aclaraciones. P: \u00bfAceptan solicitudes de incorporaci\u00f3n de cambios? Se agradecen los informes de errores y pueden enviarse a trav\u00e9s del seguimiento de problemas . No se aceptan solicitudes de incorporaci\u00f3n de cambios, excepto por invitaci\u00f3n. Primero, env\u00ede un informe de problemas.","title":"Home"},{"location":"#bienvenidos","text":"Esta es una versi\u00f3n en Espa\u00f1ol del curso Practical Python Programming A partir de ahora todo es obra de --David Beazley ( https://dabeaz.com ), \\@dabeaz . Cuando aprend\u00ed Python por primera vez hace casi 27 a\u00f1os, me sorprendi\u00f3 de inmediato c\u00f3mo pod\u00eda aplicarlo de manera productiva a todo tipo de proyectos laborales complicados. Una d\u00e9cada despu\u00e9s, me encontr\u00e9 ense\u00f1\u00e1ndoles a otros la misma diversi\u00f3n. El resultado de esa ense\u00f1anza es este curso: un curso de Python que se ha ense\u00f1ado activamente a m\u00e1s de 400 grupos en persona desde 2007. Traders, administradores de sistemas, astr\u00f3nomos, pensadores e incluso unos cientos de cient\u00edficos espaciales que usaron Python para ayudar a aterrizar un rover en Marte, todos han tomado este curso. Ahora, me complace ponerlo a disposici\u00f3n bajo una licencia Creative Commons, completamente libre de spam, registros y otras tonter\u00edas. \u00a1Disfr\u00fatelo! (P.D.: Este curso trata sobre Python. Si quieres un curso de Python que trate sobre programaci\u00f3n, podr\u00edas considerar Programaci\u00f3n avanzada con Python )","title":"\u00a1Bienvenidos!"},{"location":"#que-es-esto","text":"El material que ves aqu\u00ed es el n\u00facleo de un curso de capacitaci\u00f3n de Python dirigido por un instructor que se utiliza para la capacitaci\u00f3n corporativa y el desarrollo profesional. Estuvo en desarrollo continuo desde 2007 hasta 2019 y se prob\u00f3 en clases del mundo real. Por lo general, se ense\u00f1a en persona durante un per\u00edodo de tres o cuatro d\u00edas, lo que requiere aproximadamente entre 25 y 35 horas de trabajo intenso. Esto incluye la realizaci\u00f3n de aproximadamente 130 ejercicios pr\u00e1cticos de codificaci\u00f3n.","title":"\u00bfQu\u00e9 es esto?"},{"location":"#publico-objetivo","text":"Los estudiantes de este curso suelen ser cient\u00edficos, ingenieros y programadores profesionales que ya tienen experiencia en al menos otro lenguaje de programaci\u00f3n. No se requieren conocimientos previos de Python, pero se supone que se tienen conocimientos de temas de programaci\u00f3n comunes. La mayor\u00eda de los participantes encuentran el curso desafiante, incluso si ya han estado haciendo un poco de programaci\u00f3n en Python.","title":"P\u00fablico objetivo"},{"location":"#objetivos-del-curso","text":"El objetivo de este curso es cubrir los aspectos fundamentales de la programaci\u00f3n en Python con \u00e9nfasis en la escritura de scripts, la manipulaci\u00f3n b\u00e1sica de datos y la organizaci\u00f3n de programas. Al final de este curso, los estudiantes deber\u00edan ser capaces de comenzar a escribir programas \u00fatiles en Python por su cuenta o poder comprender y modificar el c\u00f3digo Python escrito por sus compa\u00f1eros de trabajo.","title":"Objetivos del curso"},{"location":"#requisitos","text":"Para completar este curso, no necesita nada m\u00e1s que una instalaci\u00f3n b\u00e1sica de Python 3.6 o una versi\u00f3n m\u00e1s reciente y tiempo para trabajar en ella.","title":"Requisitos"},{"location":"#que-no-es-este-curso","text":"Este no es un curso para principiantes absolutos sobre c\u00f3mo programar una computadora. Se supone que ya tienes experiencia en programaci\u00f3n en alg\u00fan otro lenguaje de programaci\u00f3n o en Python. Este no es un curso sobre desarrollo web. Ese es un circo diferente. Sin embargo, si te quedas para este circo, ver\u00e1s algunos actos interesantes, pero nada que involucre animales. Este no es un curso sobre el uso de herramientas que est\u00e1n escritas en Python. Se trata de aprender el lenguaje Python central. Este no es un curso para ingenieros de software sobre c\u00f3mo escribir o mantener una aplicaci\u00f3n Python de un mill\u00f3n de l\u00edneas. No escribo programas de ese tipo, ni tampoco lo hacen la mayor\u00eda de las empresas que usan Python, y t\u00fa tampoco deber\u00edas hacerlo. \u00a1Elimina algo de una vez!","title":"Qu\u00e9 no es este curso"},{"location":"#llevame-al-curso-ya","text":"Ok, ok. \u00a1Apunta tu navegador AQU\u00cd !","title":"\u00a1Ll\u00e9vame al curso ya!"},{"location":"#discusion-de-la-comunidad","text":"\u00bfQuieres debatir sobre el curso? Puedes unirte a la conversaci\u00f3n en Gitter . No puedo prometer una respuesta individual, pero quiz\u00e1s otros puedan sumarse para ayudar.","title":"Discusi\u00f3n de la comunidad"},{"location":"#agradecimientos","text":"Lloren\u00e7 Muntaner fue fundamental en la conversi\u00f3n del contenido del curso de Apple Keynote a la estructura en l\u00ednea que ves aqu\u00ed. Varios instructores han presentado este curso en un momento u otro durante los \u00faltimos 12 a\u00f1os. Esto incluye (en orden alfab\u00e9tico): Ned Batchelder, Juan Pablo Claude, Mark Fenner, Michael Foord, Matt Harrison, Raymond Hettinger, Daniel Klein, Travis Oliphant, James Powell, Michael Selik, Hugo Shi, Ian Stokes-Rees, Yarko Tymciurak, Bryan Van de ven, Peter Wang y Mark Wiebe. Tambi\u00e9n me gustar\u00eda agradecer a los miles de estudiantes que han realizado este curso y han contribuido a su \u00e9xito con sus comentarios y discusiones.","title":"Agradecimientos"},{"location":"#preguntas-y-respuestas","text":"","title":"Preguntas y respuestas"},{"location":"#p-hay-videos-del-curso-que-pueda-ver","text":"No. Este curso se trata de que usted escriba c\u00f3digo Python, no de ver a otra persona.","title":"P: \u00bfHay videos del curso que pueda ver?"},{"location":"#p-como-se-licencia-este-curso","text":"Practical Python Programming tiene licencia Creative Commons Attribution ShareAlike 4.0 International License.","title":"P: \u00bfC\u00f3mo se licencia este curso?"},{"location":"#p-puedo-usar-este-material-para-ensenar-mi-propio-curso-de-python","text":"S\u00ed, siempre que se indique la atribuci\u00f3n correspondiente.","title":"P: \u00bfPuedo usar este material para ense\u00f1ar mi propio curso de Python?"},{"location":"#p-puedo-hacer-trabajos-derivados","text":"S\u00ed, siempre que dichos trabajos tengan los mismos t\u00e9rminos de licencia y proporcionen la atribuci\u00f3n.","title":"P: \u00bfPuedo hacer trabajos derivados?"},{"location":"#p-puedo-traducir-esto-a-otro-idioma","text":"S\u00ed, eso ser\u00eda genial. Env\u00edeme un enlace cuando haya terminado.","title":"P: \u00bfPuedo traducir esto a otro idioma?"},{"location":"#p-puedo-transmitir-en-vivo-el-curso-o-hacer-un-video","text":"\u00a1S\u00ed, adelante! Probablemente aprender\u00e1s mucho de Python haciendo eso.","title":"P: \u00bfPuedo transmitir en vivo el curso o hacer un video?"},{"location":"#p-por-que-no-se-cubrio-el-tema-x","text":"Hay una cantidad limitada de material que se puede cubrir en 3 o 4 d\u00edas. Si no se cubri\u00f3, probablemente fue porque se cubri\u00f3 una vez y hizo que a todos les explotara la cabeza o nunca hubo tiempo suficiente para cubrirlo en primer lugar. Adem\u00e1s, este es un curso, no un manual de referencia de Python.","title":"P: \u00bfPor qu\u00e9 no se cubri\u00f3 el tema X?"},{"location":"#p-por-que-no-se-cubre-el-increible-command-en-el-increible-tool","text":"El enfoque de este curso es aprender el lenguaje Python central, no aprender los nombres de los comandos en las herramientas.","title":"P: \u00bfPor qu\u00e9 no se cubre el incre\u00edble {command} en el incre\u00edble {tool}?"},{"location":"#p-este-curso-se-mantiene-o-se-actualiza","text":"Este curso representa un \"producto terminado\" que se ense\u00f1\u00f3 y desarroll\u00f3 durante m\u00e1s de una d\u00e9cada. No tengo planes de revisar significativamente el material en este momento, pero ocasionalmente corregir\u00e9 errores y agregar\u00e9 aclaraciones.","title":"P: \u00bfEste curso se mantiene o se actualiza?"},{"location":"#p-aceptan-solicitudes-de-incorporacion-de-cambios","text":"Se agradecen los informes de errores y pueden enviarse a trav\u00e9s del seguimiento de problemas . No se aceptan solicitudes de incorporaci\u00f3n de cambios, excepto por invitaci\u00f3n. Primero, env\u00ede un informe de problemas.","title":"P: \u00bfAceptan solicitudes de incorporaci\u00f3n de cambios?"},{"location":"00_Setup/","text":"Configuraci\u00f3n y descripci\u00f3n general del curso \u00a1Bienvenido a Programaci\u00f3n Practica de Python! Esta p\u00e1gina contiene informaci\u00f3n importante sobre la configuraci\u00f3n y la log\u00edstica del curso. Duraci\u00f3n del curso y requisitos de tiempo Este curso se imparti\u00f3 originalmente como una capacitaci\u00f3n presencial dirigida por un instructor que dur\u00f3 de 3 a 4 d\u00edas. Para completar el curso en su totalidad, debe planificar un m\u00ednimo de 25 a 35 horas de trabajo. La mayor\u00eda de los participantes encuentran que el material es bastante desafiante sin echar un vistazo al c\u00f3digo de la soluci\u00f3n (ver a continuaci\u00f3n). Configuraci\u00f3n e instalaci\u00f3n de Python No necesita nada m\u00e1s que una instalaci\u00f3n b\u00e1sica de Python 3.6 o posterior. No hay dependencia de ning\u00fan sistema operativo, editor, IDE o herramientas adicionales relacionadas con Python en particular. No hay dependencias de terceros. Dicho esto, la mayor parte de este curso implica aprender a escribir scripts y peque\u00f1os programas que involucran la lectura de datos de archivos. Por lo tanto, debe asegurarse de estar en un entorno en el que pueda trabajar f\u00e1cilmente con archivos. Esto incluye el uso de un editor para crear programas Python y poder ejecutar esos programas desde el cmd/shell/terminal. IMPORTANTE: En adelante los t\u00e9rminos cmd , shell , terminal se utilizaran indeistintamente con el mismo significado. Es posible que te sientas inclinado a trabajar en este curso utilizando un entorno m\u00e1s interactivo, como Jupyter Notebooks. \u00a1NO LO RECOMIENDO! Aunque los cuadernos son excelentes para la experimentaci\u00f3n, muchos de los ejercicios de este curso ense\u00f1an conceptos relacionados con la organizaci\u00f3n de programas. Esto incluye trabajar con funciones, m\u00f3dulos, declaraciones de importaci\u00f3n y refactorizaci\u00f3n de programas cuyo c\u00f3digo fuente abarca varios archivos. En mi experiencia, es dif\u00edcil replicar este tipo de entorno de trabajo en cuadernos. Bifurcaci\u00f3n/clonaci\u00f3n del repositorio del curso Para preparar tu entorno para el curso, te recomiendo crear tu propia bifurcaci\u00f3n del repositorio de GitHub del curso en https://github.com/dabeaz-course/practical-python . Una vez que hayas terminado, puedes clonarlo en tu m\u00e1quina local: bash % git clone https://github.com/yourname/practical-python bash % cd practical-python bash % Haz todo tu trabajo dentro del directorio practical-python/ . Si env\u00edas el c\u00f3digo de tu soluci\u00f3n a tu bifurcaci\u00f3n del repositorio, esto mantendr\u00e1 todo tu c\u00f3digo junto en un solo lugar y tendr\u00e1s un buen registro hist\u00f3rico de tu trabajo cuando hayas terminado. Si no quieres crear una bifurcaci\u00f3n personal o no tienes una cuenta de GitHub, a\u00fan puedes clonar el directorio del curso en tu m\u00e1quina: bash % git clone https://github.com/dabeaz-course/practical-python``` bash % cd practical-python``` bash % Con esta opci\u00f3n, no podr\u00e1s confirmar cambios en el c\u00f3digo excepto en la copia local en tu m\u00e1quina. Dise\u00f1o del trabajo del curso Realiza todo tu trabajo de codificaci\u00f3n en el directorio Work/ . Dentro de ese directorio, hay un directorio Data/ . El directorio Data/ contiene una variedad de archivos de datos y otros scripts utilizados durante el curso. Con frecuencia tendr\u00e1s que acceder a archivos ubicados en Data/ . Los ejercicios del curso se escriben asumiendo que est\u00e1s creando programas en el directorio Work/ . Orden del curso El material del curso debe completarse en el orden de las secciones, comenzando con la secci\u00f3n 1. Los ejercicios del curso en las secciones posteriores se basan en el c\u00f3digo escrito en las secciones anteriores. Muchos de los ejercicios posteriores implican una refactorizaci\u00f3n menor del c\u00f3digo existente. C\u00f3digo de la soluci\u00f3n El directorio Solutions/ contiene el c\u00f3digo de la soluci\u00f3n completa para los ejercicios seleccionados. No dude en consultarlo si necesita una pista. Sin embargo, para aprovechar al m\u00e1ximo el curso, debe intentar crear sus propias soluciones primero. Contenido | Pr\u00f3ximo (1 Introducci\u00f3n a Python)","title":"00 Setup"},{"location":"00_Setup/#configuracion-y-descripcion-general-del-curso","text":"\u00a1Bienvenido a Programaci\u00f3n Practica de Python! Esta p\u00e1gina contiene informaci\u00f3n importante sobre la configuraci\u00f3n y la log\u00edstica del curso.","title":"Configuraci\u00f3n y descripci\u00f3n general del curso"},{"location":"00_Setup/#duracion-del-curso-y-requisitos-de-tiempo","text":"Este curso se imparti\u00f3 originalmente como una capacitaci\u00f3n presencial dirigida por un instructor que dur\u00f3 de 3 a 4 d\u00edas. Para completar el curso en su totalidad, debe planificar un m\u00ednimo de 25 a 35 horas de trabajo. La mayor\u00eda de los participantes encuentran que el material es bastante desafiante sin echar un vistazo al c\u00f3digo de la soluci\u00f3n (ver a continuaci\u00f3n).","title":"Duraci\u00f3n del curso y requisitos de tiempo"},{"location":"00_Setup/#configuracion-e-instalacion-de-python","text":"No necesita nada m\u00e1s que una instalaci\u00f3n b\u00e1sica de Python 3.6 o posterior. No hay dependencia de ning\u00fan sistema operativo, editor, IDE o herramientas adicionales relacionadas con Python en particular. No hay dependencias de terceros. Dicho esto, la mayor parte de este curso implica aprender a escribir scripts y peque\u00f1os programas que involucran la lectura de datos de archivos. Por lo tanto, debe asegurarse de estar en un entorno en el que pueda trabajar f\u00e1cilmente con archivos. Esto incluye el uso de un editor para crear programas Python y poder ejecutar esos programas desde el cmd/shell/terminal. IMPORTANTE: En adelante los t\u00e9rminos cmd , shell , terminal se utilizaran indeistintamente con el mismo significado. Es posible que te sientas inclinado a trabajar en este curso utilizando un entorno m\u00e1s interactivo, como Jupyter Notebooks. \u00a1NO LO RECOMIENDO! Aunque los cuadernos son excelentes para la experimentaci\u00f3n, muchos de los ejercicios de este curso ense\u00f1an conceptos relacionados con la organizaci\u00f3n de programas. Esto incluye trabajar con funciones, m\u00f3dulos, declaraciones de importaci\u00f3n y refactorizaci\u00f3n de programas cuyo c\u00f3digo fuente abarca varios archivos. En mi experiencia, es dif\u00edcil replicar este tipo de entorno de trabajo en cuadernos.","title":"Configuraci\u00f3n e instalaci\u00f3n de Python"},{"location":"00_Setup/#bifurcacionclonacion-del-repositorio-del-curso","text":"Para preparar tu entorno para el curso, te recomiendo crear tu propia bifurcaci\u00f3n del repositorio de GitHub del curso en https://github.com/dabeaz-course/practical-python . Una vez que hayas terminado, puedes clonarlo en tu m\u00e1quina local: bash % git clone https://github.com/yourname/practical-python bash % cd practical-python bash % Haz todo tu trabajo dentro del directorio practical-python/ . Si env\u00edas el c\u00f3digo de tu soluci\u00f3n a tu bifurcaci\u00f3n del repositorio, esto mantendr\u00e1 todo tu c\u00f3digo junto en un solo lugar y tendr\u00e1s un buen registro hist\u00f3rico de tu trabajo cuando hayas terminado. Si no quieres crear una bifurcaci\u00f3n personal o no tienes una cuenta de GitHub, a\u00fan puedes clonar el directorio del curso en tu m\u00e1quina: bash % git clone https://github.com/dabeaz-course/practical-python``` bash % cd practical-python``` bash % Con esta opci\u00f3n, no podr\u00e1s confirmar cambios en el c\u00f3digo excepto en la copia local en tu m\u00e1quina.","title":"Bifurcaci\u00f3n/clonaci\u00f3n del repositorio del curso"},{"location":"00_Setup/#diseno-del-trabajo-del-curso","text":"Realiza todo tu trabajo de codificaci\u00f3n en el directorio Work/ . Dentro de ese directorio, hay un directorio Data/ . El directorio Data/ contiene una variedad de archivos de datos y otros scripts utilizados durante el curso. Con frecuencia tendr\u00e1s que acceder a archivos ubicados en Data/ . Los ejercicios del curso se escriben asumiendo que est\u00e1s creando programas en el directorio Work/ .","title":"Dise\u00f1o del trabajo del curso"},{"location":"00_Setup/#orden-del-curso","text":"El material del curso debe completarse en el orden de las secciones, comenzando con la secci\u00f3n 1. Los ejercicios del curso en las secciones posteriores se basan en el c\u00f3digo escrito en las secciones anteriores. Muchos de los ejercicios posteriores implican una refactorizaci\u00f3n menor del c\u00f3digo existente.","title":"Orden del curso"},{"location":"00_Setup/#codigo-de-la-solucion","text":"El directorio Solutions/ contiene el c\u00f3digo de la soluci\u00f3n completa para los ejercicios seleccionados. No dude en consultarlo si necesita una pista. Sin embargo, para aprovechar al m\u00e1ximo el curso, debe intentar crear sus propias soluciones primero. Contenido | Pr\u00f3ximo (1 Introducci\u00f3n a Python)","title":"C\u00f3digo de la soluci\u00f3n"},{"location":"Contents/","text":"Programaci\u00f3n pr\u00e1ctica en Python Tabla de contenido 0. Configuraci\u00f3n del curso (\u00a1LEA PRIMERO!) 1. Introducci\u00f3n a Python 2. Trabajar con datos 3. Organizaci\u00f3n del programa 4. Classes y Objetos 5. Funcionamiento interno de los objetos de Python 6. Generadores 7. Algunos temas avanzados 8. Pruebas, registro y depuraci\u00f3n 9. Paquetes Consulte las Notas del instructor si planea impartiendo el curso. Inicio","title":"Programaci\u00f3n pr\u00e1ctica en Python"},{"location":"Contents/#programacion-practica-en-python","text":"","title":"Programaci\u00f3n pr\u00e1ctica en Python"},{"location":"Contents/#tabla-de-contenido","text":"0. Configuraci\u00f3n del curso (\u00a1LEA PRIMERO!) 1. Introducci\u00f3n a Python 2. Trabajar con datos 3. Organizaci\u00f3n del programa 4. Classes y Objetos 5. Funcionamiento interno de los objetos de Python 6. Generadores 7. Algunos temas avanzados 8. Pruebas, registro y depuraci\u00f3n 9. Paquetes Consulte las Notas del instructor si planea impartiendo el curso. Inicio","title":"Tabla de contenido"},{"location":"InstructorNotes/","text":"Programaci\u00f3n pr\u00e1ctica con Python - Notas para el instructor Autor: David Beazley Descripci\u00f3n general Este documento proporciona algunas notas generales y consejos sobre la ense\u00f1anza del contenido de mi curso \u201cPractical Python\u201d, incluidos los objetivos, el p\u00fablico objetivo, las partes complicadas, etc. Estas instrucciones se les dieron a las personas que imparten el curso en un entorno t\u00edpico de capacitaci\u00f3n corporativa de tres d\u00edas. Es posible que le brinden una idea sobre c\u00f3mo ense\u00f1ar su propio curso. P\u00fablico objetivo y enfoque general Este curso est\u00e1 destinado a ser un curso de \u201cIntroducci\u00f3n a Python\u201d para personas que ya tienen algo de experiencia en programaci\u00f3n. Este definitivamente no es un curso dise\u00f1ado para ense\u00f1ar a las personas \u201cprogramaci\u00f3n 101\u201d. Habiendo dicho eso, he observado que el estudiante t\u00edpico en un curso de Python tampoco es probable que sea un ingeniero de software o programador de n\u00facleo duro. En cambio, probablemente obtendr\u00e1 una mezcla de ingenieros, cient\u00edficos, programadores web y desarrolladores m\u00e1s inexpertos. La formaci\u00f3n de los estudiantes var\u00eda ampliamente. Es posible que tengas algunos estudiantes con mucha experiencia en C, C++ y Java, otros pueden saber PHP y HTML, otros pueden venir de herramientas como MATLAB y otros pueden no tener casi ninguna experiencia en \"programaci\u00f3n\" tradicional a pesar de mis mejores intentos por aclarar los requisitos previos. Con esto en mente, el curso apunta a ense\u00f1ar Python a trav\u00e9s del problema general de manipulaci\u00f3n de datos (datos del mercado de valores en particular). Este dominio ha sido elegido porque es simple y algo que todos deber\u00edan saber al respecto independientemente de su experiencia. Solo como ejemplo, es probable que los estudiantes con habilidades de programaci\u00f3n d\u00e9biles a\u00fan sepan sobre cosas comunes como usar una hoja de c\u00e1lculo (por ejemplo, Excel). Entonces, si est\u00e1n realmente estancados, puedes decirles cosas como \"bueno, esta lista de tuplas es como filas de datos en una hoja de c\u00e1lculo\" o \"una comprensi\u00f3n de listas es la misma idea que aplicar una operaci\u00f3n a una columna de la hoja de c\u00e1lculo y colocar el resultado en una columna diferente\". La idea clave es permanecer centrado en un entorno del mundo real en lugar de desviarse hacia problemas esot\u00e9ricos de \"ciencia inform\u00e1tica\" (por ejemplo, \"vamos a calcular los n\u00fameros de Fibonacci\"). Este dominio de problemas tambi\u00e9n funciona bien para introducir otros temas de programaci\u00f3n. Por ejemplo, los cient\u00edficos o ingenieros pueden querer saber sobre an\u00e1lisis de datos o gr\u00e1ficos. Por lo tanto, puede mostrarles c\u00f3mo hacer un gr\u00e1fico usando matplotlib. Los programadores web pueden querer saber c\u00f3mo presentar datos del mercado de valores en una p\u00e1gina web. Por lo tanto, puede hablar sobre motores de plantillas. Los administradores de sistemas pueden querer hacer algo con archivos de registro. Por lo tanto, puede indicarles un archivo de registro de datos burs\u00e1tiles en tiempo real. Los ingenieros de software pueden querer saber sobre dise\u00f1o. Por lo tanto, puede pedirles que busquen formas de encapsular datos burs\u00e1tiles dentro de un objeto o hacer que un programa sea extensible (por ejemplo, c\u00f3mo hacer que este programa produzca resultados en 10 formatos de tabla diferentes). Ya entiende la idea. Pautas de presentaci\u00f3n Las diapositivas de la presentaci\u00f3n (notas) est\u00e1n ah\u00ed para brindar una estructura narrativa al curso y para que los estudiantes las utilicen como referencia cuando trabajan en ejercicios. No repase laboriosamente cada punto de cada diapositiva; suponga que los estudiantes pueden leer y que tendr\u00e1n tiempo para volver a leer cuando est\u00e9n codificando. Suelo repasar las diapositivas a un ritmo bastante r\u00e1pido, mostrando ejemplos breves de manera interactiva a medida que avanzo. A menudo me salto diapositivas por completo a favor de demostraciones en vivo. Por ejemplo, no es necesario hacer un mont\u00f3n de diapositivas con listas. Simplemente vaya al int\u00e9rprete y haga algunos ejemplos de listas en vivo. Regla general: no m\u00e1s de 1 minuto por diapositiva, a menos que sea algo inusualmente complicado. Honestamente, probablemente podr\u00eda omitir la mayor\u00eda de las diapositivas y simplemente dar una clase con demostraciones en vivo si siente que funciona para usted. A menudo lo hago. Ejercicios del curso El curso tiene alrededor de 130 ejercicios pr\u00e1cticos. Si haces cada uno de los ejercicios y les das tiempo a los estudiantes para pensar y codificar, probablemente les llevar\u00e1 entre 10 y 12 horas. En la pr\u00e1ctica, probablemente encontrar\u00e1s que los estudiantes necesitan m\u00e1s tiempo en ciertos ejercicios. Tengo algunas notas sobre esto a continuaci\u00f3n. Debes enfatizar repetidamente a los estudiantes que el c\u00f3digo de la soluci\u00f3n est\u00e1 disponible y que est\u00e1 bien mirarlo y copiarlo, especialmente debido a los requisitos de tiempo. Antes de ense\u00f1ar el curso, te recomiendo encarecidamente que revises y trabajes en cada uno de los ejercicios del curso para que no haya sorpresas. Durante la impartici\u00f3n del curso, generalmente trabajo en cada uno de los ejercicios desde cero, sin mirar la soluci\u00f3n, en mi computadora mientras los estudiantes tambi\u00e9n trabajan. Para esto, te recomiendo encarecidamente que tengas una copia impresa de los ejercicios a mano que puedas mirar sin tener que abrirla en la pantalla de la computadora (que se est\u00e1 proyectando). Cerca del final del per\u00edodo de tiempo del ejercicio, comenzar\u00e9 a analizar mi c\u00f3digo de soluci\u00f3n, enfatizar\u00e9 diferentes partes en la pantalla y hablar\u00e9 sobre ellas. Si hay alg\u00fan problema potencial con la soluci\u00f3n (incluidas consideraciones de dise\u00f1o), tambi\u00e9n hablar\u00e9 de ello. Enfatice a los estudiantes que tal vez quieran ver o copiar el c\u00f3digo de la soluci\u00f3n antes de continuar. Contenido Secci\u00f3n 1: Introducci\u00f3n El objetivo principal de esta secci\u00f3n es que las personas se familiaricen con el entorno. Esto incluye el uso del shell interactivo y la edici\u00f3n/ejecuci\u00f3n de programas cortos. Al final de la secci\u00f3n, los estudiantes deber\u00edan poder escribir scripts cortos que lean archivos de datos y realicen peque\u00f1os c\u00e1lculos. Conocer\u00e1n los n\u00fameros, las cadenas, las listas y los archivos. Tambi\u00e9n habr\u00e1n tenido algo de exposici\u00f3n a funciones, excepciones y m\u00f3dulos, pero faltar\u00e1n muchos detalles. La primera parte de este curso suele ser la m\u00e1s larga porque los estudiantes son nuevos en las herramientas y pueden tener varios problemas para hacer que las cosas funcionen. Es absolutamente fundamental que recorra el sal\u00f3n y se asegure de que todos puedan editar, ejecutar y depurar programas simples. Aseg\u00farese de que Python est\u00e9 instalado correctamente. Aseg\u00farese de que hayan descargado los ejercicios del curso. Aseg\u00farese de que Internet funcione. Arregle cualquier otra cosa que surja. Tiempo: Mi objetivo es terminar la secci\u00f3n 1 alrededor del almuerzo del primer d\u00eda. Secci\u00f3n 2: Trabajar con datos Esta secci\u00f3n es probablemente la m\u00e1s importante del curso. Abarca los conceptos b\u00e1sicos de la representaci\u00f3n y manipulaci\u00f3n de datos, incluidas tuplas, listas, diccionarios y conjuntos. La secci\u00f3n 2.2 es la m\u00e1s importante. D\u00e9 a los estudiantes todo el tiempo que necesiten para que los ejercicios funcionen dentro de lo razonable. Seg\u00fan la audiencia, los ejercicios pueden durar 45 minutos. En la mitad de este ejercicio, a menudo avanzo a la Secci\u00f3n 2.3 (impresi\u00f3n formateada) y les doy a los estudiantes m\u00e1s tiempo para seguir trabajando. Juntas, las Secciones 2.2/2.3 pueden llevar una hora o m\u00e1s. La Secci\u00f3n 2.4 hace que las personas exploren el uso de enumerate() y zip(). Considero que estas funciones son esenciales, as\u00ed que no escatime en ella. La Secci\u00f3n 2.5 presenta el m\u00f3dulo de colecciones. Hay MUCHO que podr\u00eda decirse sobre las colecciones, pero los estudiantes no lo entender\u00e1n por completo en este momento. Aborde esto m\u00e1s desde el punto de vista de \"aqu\u00ed est\u00e1 este m\u00f3dulo interesante que deber\u00eda ver m\u00e1s adelante. Aqu\u00ed hay algunos ejemplos interesantes\". La Secci\u00f3n 2.6 presenta las comprensiones de listas, que son una caracter\u00edstica importante para procesar datos de listas. Enfatice a los estudiantes que las comprensiones de listas son muy similares a cosas como las consultas de bases de datos SQL. Al final de este ejercicio, a menudo hago una demostraci\u00f3n interactiva que involucra algo m\u00e1s avanzado. Tal vez haga una comprensi\u00f3n de listas y trace algunos datos con matplotlib. Tambi\u00e9n es una oportunidad para presentar Jupyter si as\u00ed lo desea. La Secci\u00f3n 2.7 es el ejercicio m\u00e1s sofisticado. Se relaciona con el uso de datos de primera clase en Python y el hecho de que las estructuras de datos como las listas pueden contener cualquier tipo de objeto que desee. Los ejercicios est\u00e1n relacionados con el an\u00e1lisis de columnas de datos en archivos CSV y los conceptos se reutilizan posteriormente en la Secci\u00f3n 3.2. Tiempo: lo ideal es terminar con la Secci\u00f3n 2 el primer d\u00eda. Sin embargo, es com\u00fan terminar con la Secci\u00f3n 2.5 o 2.6. Por lo tanto, no se asuste si siente que est\u00e1 un poco atrasado. Secci\u00f3n 3: Organizaci\u00f3n del programa El objetivo principal de esta secci\u00f3n es presentar m\u00e1s detalles sobre las funciones y alentar a los estudiantes a usarlas. La secci\u00f3n se construye a partir de funciones en m\u00f3dulos y escritura de scripts. La Secci\u00f3n 3.1 trata sobre pasar de la simple \"creaci\u00f3n de scripts\" a las funciones. Se debe disuadir a los estudiantes de escribir \"scripts\" desorganizados. En cambio, el c\u00f3digo debe al menos modularizarse en funciones. Hace que el c\u00f3digo sea m\u00e1s f\u00e1cil de entender, facilita la realizaci\u00f3n de cambios posteriormente y, de hecho, se ejecuta un poco m\u00e1s r\u00e1pido. Las funciones son buenas. La Secci\u00f3n 3.2 es probablemente el conjunto de ejercicios m\u00e1s avanzado de todo el curso. Hace que los estudiantes escriban una funci\u00f3n de utilidad de prop\u00f3sito general para analizar datos orientados a columnas. Sin embargo, hace un uso intensivo de listas por comprensi\u00f3n, as\u00ed como de listas de funciones (por ejemplo, funciones como objetos de primera clase). Probablemente necesitar\u00e1 guiar a las personas a trav\u00e9s de cada paso de este c\u00f3digo, mostrando c\u00f3mo funciona con gran detalle. Sin embargo, la recompensa es enorme: puede mostrar a las personas una funci\u00f3n de prop\u00f3sito general corta que hace algo incre\u00edblemente poderoso y que ser\u00eda pr\u00e1cticamente imposible de escribir en C, C++ o Java sin tener MUCHO c\u00f3digo muy complicado. Hay muchas posibles v\u00edas de dise\u00f1o/discusi\u00f3n para este c\u00f3digo. Use su imaginaci\u00f3n. La Secci\u00f3n 3.3 agrega el manejo de errores a la funci\u00f3n creada en la Secci\u00f3n 3.2. Este es un buen momento para hablar sobre el manejo de excepciones en general. Definitivamente, hable sobre los peligros de capturar todas las excepciones. Este podr\u00eda ser un buen momento para hablar sobre el elemento \u201cLos errores nunca deben pasar silenciosamente\u201d en el \u201cZen de Python\u201d. Nota: Antes del Ejercicio 3.4, aseg\u00farese de que los estudiantes obtengan versiones completamente funcionales de report.py, pcost.py y fileparse.py. C\u00f3pielas de la carpeta Soluciones si es necesario La Secci\u00f3n 3.4 presenta las importaciones de m\u00f3dulos. El archivo escrito en la Secci\u00f3n 3.2-3.3 se utiliza para simplificar el c\u00f3digo en la Secci\u00f3n 3.1. Tenga en cuenta que es posible que deba ayudar a los estudiantes a solucionar problemas con IDLE, sys.path y otras configuraciones variadas relacionadas con la importaci\u00f3n. La secci\u00f3n 3.5 habla sobre argumentos lineales. Puede que te sientas inclinado a hablar de un m\u00f3dulo como argparse. Sin embargo, ten en cuenta que hacerlo abre un atolladero. Por lo general, es mejor simplemente mencionarlo y seguir adelante. La secci\u00f3n 3.6 abre una discusi\u00f3n sobre el dise\u00f1o en general en Python. \u00bfEs mejor escribir c\u00f3digo que sea m\u00e1s flexible en lugar de c\u00f3digo que est\u00e9 programado para trabajar solo con nombres de archivo? Este es el primer lugar en el que se realiza un cambio de c\u00f3digo y se debe refactorizar el c\u00f3digo existente. A partir de aqu\u00ed, la mayor\u00eda de los ejercicios realizan peque\u00f1os cambios en el c\u00f3digo que ya se ha escrito. Secci\u00f3n 4: Clases y objetos Esta secci\u00f3n trata sobre programaci\u00f3n orientada a objetos muy b\u00e1sica. En general, no es seguro asumir que las personas tienen muchos conocimientos de OO. Por lo tanto, antes de comenzar, suelo describir en general el \u201cestilo\u201d de OO y c\u00f3mo se agrupan sus datos y m\u00e9todos. Realice algunos ejemplos con cadenas y listas para ilustrar que son \"objetos\" y que los m\u00e9todos (invocados mediante .) hacen cosas con el objeto. Enfatice c\u00f3mo los m\u00e9todos est\u00e1n asociados al objeto en s\u00ed. Por ejemplo, usted hace items.append(x), no llama a una funci\u00f3n separada append(items, x). La Secci\u00f3n 4.1 presenta la declaraci\u00f3n de clase y muestra a las personas c\u00f3mo crear un objeto b\u00e1sico. En realidad, esto solo presenta las clases como otra forma de definir una estructura de datos simple, en relaci\u00f3n con el uso de tuplas y diccionarios para este prop\u00f3sito en la Secci\u00f3n 2. La Secci\u00f3n 4.2 trata sobre la herencia y c\u00f3mo se usa para crear programas extensibles. Este conjunto de ejercicios es probablemente el m\u00e1s significativo en t\u00e9rminos de programaci\u00f3n orientada a objetos y dise\u00f1o orientado a objetos. D\u00e9 a los estudiantes mucho tiempo para trabajar en \u00e9l (30-45 minutos). Dependiendo del inter\u00e9s, puede pasar MUCHO tiempo discutiendo aspectos de la orientaci\u00f3n a objetos. Por ejemplo, diferentes patrones de dise\u00f1o, jerarqu\u00edas de herencia, clases base abstractas, etc. La Secci\u00f3n 4.3 realiza algunos experimentos con m\u00e9todos especiales. No dedicar\u00eda demasiado tiempo a perder el tiempo con esto. Los m\u00e9todos especiales aparecen un poco m\u00e1s adelante en el Ejercicio 6.1 y en otras partes. Tiempo: Esto suele ser al final del segundo d\u00eda. Secci\u00f3n 5: Dentro de los objetos Esta secci\u00f3n lleva a los estudiantes detr\u00e1s de escena del sistema de objetos y c\u00f3mo se construye utilizando diccionarios, c\u00f3mo se vinculan las instancias y las clases y c\u00f3mo funciona la herencia. Sin embargo, la parte m\u00e1s importante de esta secci\u00f3n es probablemente el material sobre encapsulaci\u00f3n (atributos privados, propiedades, ranuras, etc.) La Secci\u00f3n 5.1 simplemente quita las cubiertas y hace que los estudiantes observen y jueguen con los diccionarios subyacentes de instancias y clases. La Secci\u00f3n 5.2 trata sobre ocultar atributos detr\u00e1s de funciones get/set y el uso de propiedades. Normalmente hago hincapi\u00e9 en que estas t\u00e9cnicas se utilizan com\u00fanmente en bibliotecas y marcos de trabajo, especialmente en situaciones en las que se desea un mayor control sobre lo que se le permite hacer a un usuario. Un experto en Python notar\u00e1 que no hablo en absoluto sobre temas avanzados como descriptores o m\u00e9todos de acceso a atributos ( __getattr__ , __setattr__ ). He descubierto, a trav\u00e9s de la experiencia, que esto es demasiada sobrecarga mental para los estudiantes que toman el curso de introducci\u00f3n. La cabeza de todos ya est\u00e1 al borde de explotar en este punto y si hablas sobre c\u00f3mo funcionan algo como los descriptores, los perder\u00e1s por el resto del d\u00eda, si no por el resto del curso. Gu\u00e1rdalo para un curso de \"Python avanzado\". Si est\u00e1s mirando el reloj pensando \"No hay manera de que vaya a terminar este curso\", puedes saltarte la secci\u00f3n 5 por completo. Secci\u00f3n 6: Generadores El objetivo principal de esta secci\u00f3n es presentar los generadores como una forma de definir iteraciones personalizadas y utilizarlos para diversos problemas relacionados con el manejo de datos. Los ejercicios del curso hacen que los estudiantes analicen transmisiones de datos en forma de actualizaciones de stock que se escriben en un archivo de registro. Hay dos grandes ideas que destacar. Primero, los generadores se pueden utilizar para escribir c\u00f3digo basado en el procesamiento incremental. Esto puede ser muy \u00fatil para cosas como la transmisi\u00f3n de datos o conjuntos de datos enormes que son demasiado grandes para quepa en la memoria de una sola vez. La segunda idea es que se pueden encadenar generadores/iteradores para crear canales de procesamiento (algo as\u00ed como las tuber\u00edas de Unix). Nuevamente, esta puede ser una forma realmente poderosa de procesar y pensar en transmisiones, conjuntos de datos grandes, etc. Algunas omisiones: aunque se describe el protocolo de iteraci\u00f3n, las notas no detallan la creaci\u00f3n de objetos iterables (es decir, clases con __iter__() y next() ). En la pr\u00e1ctica, he descubierto que no es necesario hacer esto tan a menudo (los generadores suelen ser mejores/m\u00e1s f\u00e1ciles). Por lo tanto, en aras del tiempo, he tomado la decisi\u00f3n consciente de omitirlo. Tampoco se incluyen los generadores extendidos (corrutinas) ni los usos de los generadores para la concurrencia (tasklets, etc.). Eso es mejor que se trate en cursos avanzados. Secci\u00f3n 7: Temas avanzados B\u00e1sicamente, esta secci\u00f3n es una variedad de temas m\u00e1s avanzados que podr\u00edan haberse tratado antes, pero no se hicieron por varias razones relacionadas con el flujo del curso y el contenido de los ejercicios del curso. Si quieres saber, sol\u00eda presentar este material antes en el curso, pero ya estaba sobrecargado con suficiente informaci\u00f3n. Volver a \u00e9l m\u00e1s tarde parece funcionar mejor, especialmente porque a esta altura, todos est\u00e1n mucho m\u00e1s familiarizados con el trabajo en Python y comienzan a entenderlo. Los temas incluyen argumentos de funciones vari\u00e1dicas (*args, **kwargs), lambda, cierres y decoradores. La discusi\u00f3n de decoradores es solo una peque\u00f1a pista de lo que es posible con la metaprogramaci\u00f3n. Si\u00e9ntete libre de decir m\u00e1s sobre lo que es posible, \u00a1pero probablemente me mantendr\u00eda alejado de las metaclases! \u00daltimamente, he estado demostrando \"numba\" como un ejemplo de un decorador m\u00e1s interesante. Si tiene poco tiempo, puede omitir la mayor parte de la secci\u00f3n 7 o comprimirla en gran medida (por ejemplo, puede omitir ejercicios). Secci\u00f3n 8: Pruebas y depuraci\u00f3n El objetivo principal de esta secci\u00f3n es simplemente presentar varias herramientas y t\u00e9cnicas relacionadas con las pruebas, la depuraci\u00f3n y el desarrollo de software. Muestre a todos el m\u00f3dulo unittest. Presente el m\u00f3dulo de registro. Discuta las afirmaciones y la idea de los \"contratos\". Muestre a las personas el depurador y el generador de perfiles. La mayor parte de esto se explica por s\u00ed solo. Secci\u00f3n 9: Paquetes En este punto, los estudiantes han escrito una variedad de archivos (pcost.py, report.py, fileparse.py, tableformat.py, stock.py, portfolio.py, follow.py, etc.). Dos objetivos principales en esta secci\u00f3n. Primero, poner todo el c\u00f3digo en una estructura de paquete Python. Esta es solo una introducci\u00f3n suave a eso, pero mover\u00e1n los archivos a un directorio y todo se romper\u00e1. Tendr\u00e1n que corregir sus declaraciones de importaci\u00f3n (importaciones relativas a paquetes) y tal vez modificar un archivo __init__.py . Segundo objetivo: escribir un archivo setup.py simple que puedan usar para empaquetar el c\u00f3digo y d\u00e1rselo a alguien. Eso es todo. Fin del curso. Contenido","title":"Programaci\u00f3n pr\u00e1ctica con Python - Notas para el instructor"},{"location":"InstructorNotes/#programacion-practica-con-python-notas-para-el-instructor","text":"Autor: David Beazley","title":"Programaci\u00f3n pr\u00e1ctica con Python - Notas para el instructor"},{"location":"InstructorNotes/#descripcion-general","text":"Este documento proporciona algunas notas generales y consejos sobre la ense\u00f1anza del contenido de mi curso \u201cPractical Python\u201d, incluidos los objetivos, el p\u00fablico objetivo, las partes complicadas, etc. Estas instrucciones se les dieron a las personas que imparten el curso en un entorno t\u00edpico de capacitaci\u00f3n corporativa de tres d\u00edas. Es posible que le brinden una idea sobre c\u00f3mo ense\u00f1ar su propio curso.","title":"Descripci\u00f3n general"},{"location":"InstructorNotes/#publico-objetivo-y-enfoque-general","text":"Este curso est\u00e1 destinado a ser un curso de \u201cIntroducci\u00f3n a Python\u201d para personas que ya tienen algo de experiencia en programaci\u00f3n. Este definitivamente no es un curso dise\u00f1ado para ense\u00f1ar a las personas \u201cprogramaci\u00f3n 101\u201d. Habiendo dicho eso, he observado que el estudiante t\u00edpico en un curso de Python tampoco es probable que sea un ingeniero de software o programador de n\u00facleo duro. En cambio, probablemente obtendr\u00e1 una mezcla de ingenieros, cient\u00edficos, programadores web y desarrolladores m\u00e1s inexpertos. La formaci\u00f3n de los estudiantes var\u00eda ampliamente. Es posible que tengas algunos estudiantes con mucha experiencia en C, C++ y Java, otros pueden saber PHP y HTML, otros pueden venir de herramientas como MATLAB y otros pueden no tener casi ninguna experiencia en \"programaci\u00f3n\" tradicional a pesar de mis mejores intentos por aclarar los requisitos previos. Con esto en mente, el curso apunta a ense\u00f1ar Python a trav\u00e9s del problema general de manipulaci\u00f3n de datos (datos del mercado de valores en particular). Este dominio ha sido elegido porque es simple y algo que todos deber\u00edan saber al respecto independientemente de su experiencia. Solo como ejemplo, es probable que los estudiantes con habilidades de programaci\u00f3n d\u00e9biles a\u00fan sepan sobre cosas comunes como usar una hoja de c\u00e1lculo (por ejemplo, Excel). Entonces, si est\u00e1n realmente estancados, puedes decirles cosas como \"bueno, esta lista de tuplas es como filas de datos en una hoja de c\u00e1lculo\" o \"una comprensi\u00f3n de listas es la misma idea que aplicar una operaci\u00f3n a una columna de la hoja de c\u00e1lculo y colocar el resultado en una columna diferente\". La idea clave es permanecer centrado en un entorno del mundo real en lugar de desviarse hacia problemas esot\u00e9ricos de \"ciencia inform\u00e1tica\" (por ejemplo, \"vamos a calcular los n\u00fameros de Fibonacci\"). Este dominio de problemas tambi\u00e9n funciona bien para introducir otros temas de programaci\u00f3n. Por ejemplo, los cient\u00edficos o ingenieros pueden querer saber sobre an\u00e1lisis de datos o gr\u00e1ficos. Por lo tanto, puede mostrarles c\u00f3mo hacer un gr\u00e1fico usando matplotlib. Los programadores web pueden querer saber c\u00f3mo presentar datos del mercado de valores en una p\u00e1gina web. Por lo tanto, puede hablar sobre motores de plantillas. Los administradores de sistemas pueden querer hacer algo con archivos de registro. Por lo tanto, puede indicarles un archivo de registro de datos burs\u00e1tiles en tiempo real. Los ingenieros de software pueden querer saber sobre dise\u00f1o. Por lo tanto, puede pedirles que busquen formas de encapsular datos burs\u00e1tiles dentro de un objeto o hacer que un programa sea extensible (por ejemplo, c\u00f3mo hacer que este programa produzca resultados en 10 formatos de tabla diferentes). Ya entiende la idea.","title":"P\u00fablico objetivo y enfoque general"},{"location":"InstructorNotes/#pautas-de-presentacion","text":"Las diapositivas de la presentaci\u00f3n (notas) est\u00e1n ah\u00ed para brindar una estructura narrativa al curso y para que los estudiantes las utilicen como referencia cuando trabajan en ejercicios. No repase laboriosamente cada punto de cada diapositiva; suponga que los estudiantes pueden leer y que tendr\u00e1n tiempo para volver a leer cuando est\u00e9n codificando. Suelo repasar las diapositivas a un ritmo bastante r\u00e1pido, mostrando ejemplos breves de manera interactiva a medida que avanzo. A menudo me salto diapositivas por completo a favor de demostraciones en vivo. Por ejemplo, no es necesario hacer un mont\u00f3n de diapositivas con listas. Simplemente vaya al int\u00e9rprete y haga algunos ejemplos de listas en vivo. Regla general: no m\u00e1s de 1 minuto por diapositiva, a menos que sea algo inusualmente complicado. Honestamente, probablemente podr\u00eda omitir la mayor\u00eda de las diapositivas y simplemente dar una clase con demostraciones en vivo si siente que funciona para usted. A menudo lo hago.","title":"Pautas de presentaci\u00f3n"},{"location":"InstructorNotes/#ejercicios-del-curso","text":"El curso tiene alrededor de 130 ejercicios pr\u00e1cticos. Si haces cada uno de los ejercicios y les das tiempo a los estudiantes para pensar y codificar, probablemente les llevar\u00e1 entre 10 y 12 horas. En la pr\u00e1ctica, probablemente encontrar\u00e1s que los estudiantes necesitan m\u00e1s tiempo en ciertos ejercicios. Tengo algunas notas sobre esto a continuaci\u00f3n. Debes enfatizar repetidamente a los estudiantes que el c\u00f3digo de la soluci\u00f3n est\u00e1 disponible y que est\u00e1 bien mirarlo y copiarlo, especialmente debido a los requisitos de tiempo. Antes de ense\u00f1ar el curso, te recomiendo encarecidamente que revises y trabajes en cada uno de los ejercicios del curso para que no haya sorpresas. Durante la impartici\u00f3n del curso, generalmente trabajo en cada uno de los ejercicios desde cero, sin mirar la soluci\u00f3n, en mi computadora mientras los estudiantes tambi\u00e9n trabajan. Para esto, te recomiendo encarecidamente que tengas una copia impresa de los ejercicios a mano que puedas mirar sin tener que abrirla en la pantalla de la computadora (que se est\u00e1 proyectando). Cerca del final del per\u00edodo de tiempo del ejercicio, comenzar\u00e9 a analizar mi c\u00f3digo de soluci\u00f3n, enfatizar\u00e9 diferentes partes en la pantalla y hablar\u00e9 sobre ellas. Si hay alg\u00fan problema potencial con la soluci\u00f3n (incluidas consideraciones de dise\u00f1o), tambi\u00e9n hablar\u00e9 de ello. Enfatice a los estudiantes que tal vez quieran ver o copiar el c\u00f3digo de la soluci\u00f3n antes de continuar.","title":"Ejercicios del curso"},{"location":"InstructorNotes/#contenido","text":"","title":"Contenido"},{"location":"InstructorNotes/#seccion-1-introduccion","text":"El objetivo principal de esta secci\u00f3n es que las personas se familiaricen con el entorno. Esto incluye el uso del shell interactivo y la edici\u00f3n/ejecuci\u00f3n de programas cortos. Al final de la secci\u00f3n, los estudiantes deber\u00edan poder escribir scripts cortos que lean archivos de datos y realicen peque\u00f1os c\u00e1lculos. Conocer\u00e1n los n\u00fameros, las cadenas, las listas y los archivos. Tambi\u00e9n habr\u00e1n tenido algo de exposici\u00f3n a funciones, excepciones y m\u00f3dulos, pero faltar\u00e1n muchos detalles. La primera parte de este curso suele ser la m\u00e1s larga porque los estudiantes son nuevos en las herramientas y pueden tener varios problemas para hacer que las cosas funcionen. Es absolutamente fundamental que recorra el sal\u00f3n y se asegure de que todos puedan editar, ejecutar y depurar programas simples. Aseg\u00farese de que Python est\u00e9 instalado correctamente. Aseg\u00farese de que hayan descargado los ejercicios del curso. Aseg\u00farese de que Internet funcione. Arregle cualquier otra cosa que surja. Tiempo: Mi objetivo es terminar la secci\u00f3n 1 alrededor del almuerzo del primer d\u00eda.","title":"Secci\u00f3n 1: Introducci\u00f3n"},{"location":"InstructorNotes/#seccion-2-trabajar-con-datos","text":"Esta secci\u00f3n es probablemente la m\u00e1s importante del curso. Abarca los conceptos b\u00e1sicos de la representaci\u00f3n y manipulaci\u00f3n de datos, incluidas tuplas, listas, diccionarios y conjuntos. La secci\u00f3n 2.2 es la m\u00e1s importante. D\u00e9 a los estudiantes todo el tiempo que necesiten para que los ejercicios funcionen dentro de lo razonable. Seg\u00fan la audiencia, los ejercicios pueden durar 45 minutos. En la mitad de este ejercicio, a menudo avanzo a la Secci\u00f3n 2.3 (impresi\u00f3n formateada) y les doy a los estudiantes m\u00e1s tiempo para seguir trabajando. Juntas, las Secciones 2.2/2.3 pueden llevar una hora o m\u00e1s. La Secci\u00f3n 2.4 hace que las personas exploren el uso de enumerate() y zip(). Considero que estas funciones son esenciales, as\u00ed que no escatime en ella. La Secci\u00f3n 2.5 presenta el m\u00f3dulo de colecciones. Hay MUCHO que podr\u00eda decirse sobre las colecciones, pero los estudiantes no lo entender\u00e1n por completo en este momento. Aborde esto m\u00e1s desde el punto de vista de \"aqu\u00ed est\u00e1 este m\u00f3dulo interesante que deber\u00eda ver m\u00e1s adelante. Aqu\u00ed hay algunos ejemplos interesantes\". La Secci\u00f3n 2.6 presenta las comprensiones de listas, que son una caracter\u00edstica importante para procesar datos de listas. Enfatice a los estudiantes que las comprensiones de listas son muy similares a cosas como las consultas de bases de datos SQL. Al final de este ejercicio, a menudo hago una demostraci\u00f3n interactiva que involucra algo m\u00e1s avanzado. Tal vez haga una comprensi\u00f3n de listas y trace algunos datos con matplotlib. Tambi\u00e9n es una oportunidad para presentar Jupyter si as\u00ed lo desea. La Secci\u00f3n 2.7 es el ejercicio m\u00e1s sofisticado. Se relaciona con el uso de datos de primera clase en Python y el hecho de que las estructuras de datos como las listas pueden contener cualquier tipo de objeto que desee. Los ejercicios est\u00e1n relacionados con el an\u00e1lisis de columnas de datos en archivos CSV y los conceptos se reutilizan posteriormente en la Secci\u00f3n 3.2. Tiempo: lo ideal es terminar con la Secci\u00f3n 2 el primer d\u00eda. Sin embargo, es com\u00fan terminar con la Secci\u00f3n 2.5 o 2.6. Por lo tanto, no se asuste si siente que est\u00e1 un poco atrasado.","title":"Secci\u00f3n 2: Trabajar con datos"},{"location":"InstructorNotes/#seccion-3-organizacion-del-programa","text":"El objetivo principal de esta secci\u00f3n es presentar m\u00e1s detalles sobre las funciones y alentar a los estudiantes a usarlas. La secci\u00f3n se construye a partir de funciones en m\u00f3dulos y escritura de scripts. La Secci\u00f3n 3.1 trata sobre pasar de la simple \"creaci\u00f3n de scripts\" a las funciones. Se debe disuadir a los estudiantes de escribir \"scripts\" desorganizados. En cambio, el c\u00f3digo debe al menos modularizarse en funciones. Hace que el c\u00f3digo sea m\u00e1s f\u00e1cil de entender, facilita la realizaci\u00f3n de cambios posteriormente y, de hecho, se ejecuta un poco m\u00e1s r\u00e1pido. Las funciones son buenas. La Secci\u00f3n 3.2 es probablemente el conjunto de ejercicios m\u00e1s avanzado de todo el curso. Hace que los estudiantes escriban una funci\u00f3n de utilidad de prop\u00f3sito general para analizar datos orientados a columnas. Sin embargo, hace un uso intensivo de listas por comprensi\u00f3n, as\u00ed como de listas de funciones (por ejemplo, funciones como objetos de primera clase). Probablemente necesitar\u00e1 guiar a las personas a trav\u00e9s de cada paso de este c\u00f3digo, mostrando c\u00f3mo funciona con gran detalle. Sin embargo, la recompensa es enorme: puede mostrar a las personas una funci\u00f3n de prop\u00f3sito general corta que hace algo incre\u00edblemente poderoso y que ser\u00eda pr\u00e1cticamente imposible de escribir en C, C++ o Java sin tener MUCHO c\u00f3digo muy complicado. Hay muchas posibles v\u00edas de dise\u00f1o/discusi\u00f3n para este c\u00f3digo. Use su imaginaci\u00f3n. La Secci\u00f3n 3.3 agrega el manejo de errores a la funci\u00f3n creada en la Secci\u00f3n 3.2. Este es un buen momento para hablar sobre el manejo de excepciones en general. Definitivamente, hable sobre los peligros de capturar todas las excepciones. Este podr\u00eda ser un buen momento para hablar sobre el elemento \u201cLos errores nunca deben pasar silenciosamente\u201d en el \u201cZen de Python\u201d. Nota: Antes del Ejercicio 3.4, aseg\u00farese de que los estudiantes obtengan versiones completamente funcionales de report.py, pcost.py y fileparse.py. C\u00f3pielas de la carpeta Soluciones si es necesario La Secci\u00f3n 3.4 presenta las importaciones de m\u00f3dulos. El archivo escrito en la Secci\u00f3n 3.2-3.3 se utiliza para simplificar el c\u00f3digo en la Secci\u00f3n 3.1. Tenga en cuenta que es posible que deba ayudar a los estudiantes a solucionar problemas con IDLE, sys.path y otras configuraciones variadas relacionadas con la importaci\u00f3n. La secci\u00f3n 3.5 habla sobre argumentos lineales. Puede que te sientas inclinado a hablar de un m\u00f3dulo como argparse. Sin embargo, ten en cuenta que hacerlo abre un atolladero. Por lo general, es mejor simplemente mencionarlo y seguir adelante. La secci\u00f3n 3.6 abre una discusi\u00f3n sobre el dise\u00f1o en general en Python. \u00bfEs mejor escribir c\u00f3digo que sea m\u00e1s flexible en lugar de c\u00f3digo que est\u00e9 programado para trabajar solo con nombres de archivo? Este es el primer lugar en el que se realiza un cambio de c\u00f3digo y se debe refactorizar el c\u00f3digo existente. A partir de aqu\u00ed, la mayor\u00eda de los ejercicios realizan peque\u00f1os cambios en el c\u00f3digo que ya se ha escrito.","title":"Secci\u00f3n 3: Organizaci\u00f3n del programa"},{"location":"InstructorNotes/#seccion-4-clases-y-objetos","text":"Esta secci\u00f3n trata sobre programaci\u00f3n orientada a objetos muy b\u00e1sica. En general, no es seguro asumir que las personas tienen muchos conocimientos de OO. Por lo tanto, antes de comenzar, suelo describir en general el \u201cestilo\u201d de OO y c\u00f3mo se agrupan sus datos y m\u00e9todos. Realice algunos ejemplos con cadenas y listas para ilustrar que son \"objetos\" y que los m\u00e9todos (invocados mediante .) hacen cosas con el objeto. Enfatice c\u00f3mo los m\u00e9todos est\u00e1n asociados al objeto en s\u00ed. Por ejemplo, usted hace items.append(x), no llama a una funci\u00f3n separada append(items, x). La Secci\u00f3n 4.1 presenta la declaraci\u00f3n de clase y muestra a las personas c\u00f3mo crear un objeto b\u00e1sico. En realidad, esto solo presenta las clases como otra forma de definir una estructura de datos simple, en relaci\u00f3n con el uso de tuplas y diccionarios para este prop\u00f3sito en la Secci\u00f3n 2. La Secci\u00f3n 4.2 trata sobre la herencia y c\u00f3mo se usa para crear programas extensibles. Este conjunto de ejercicios es probablemente el m\u00e1s significativo en t\u00e9rminos de programaci\u00f3n orientada a objetos y dise\u00f1o orientado a objetos. D\u00e9 a los estudiantes mucho tiempo para trabajar en \u00e9l (30-45 minutos). Dependiendo del inter\u00e9s, puede pasar MUCHO tiempo discutiendo aspectos de la orientaci\u00f3n a objetos. Por ejemplo, diferentes patrones de dise\u00f1o, jerarqu\u00edas de herencia, clases base abstractas, etc. La Secci\u00f3n 4.3 realiza algunos experimentos con m\u00e9todos especiales. No dedicar\u00eda demasiado tiempo a perder el tiempo con esto. Los m\u00e9todos especiales aparecen un poco m\u00e1s adelante en el Ejercicio 6.1 y en otras partes. Tiempo: Esto suele ser al final del segundo d\u00eda.","title":"Secci\u00f3n 4: Clases y objetos"},{"location":"InstructorNotes/#seccion-5-dentro-de-los-objetos","text":"Esta secci\u00f3n lleva a los estudiantes detr\u00e1s de escena del sistema de objetos y c\u00f3mo se construye utilizando diccionarios, c\u00f3mo se vinculan las instancias y las clases y c\u00f3mo funciona la herencia. Sin embargo, la parte m\u00e1s importante de esta secci\u00f3n es probablemente el material sobre encapsulaci\u00f3n (atributos privados, propiedades, ranuras, etc.) La Secci\u00f3n 5.1 simplemente quita las cubiertas y hace que los estudiantes observen y jueguen con los diccionarios subyacentes de instancias y clases. La Secci\u00f3n 5.2 trata sobre ocultar atributos detr\u00e1s de funciones get/set y el uso de propiedades. Normalmente hago hincapi\u00e9 en que estas t\u00e9cnicas se utilizan com\u00fanmente en bibliotecas y marcos de trabajo, especialmente en situaciones en las que se desea un mayor control sobre lo que se le permite hacer a un usuario. Un experto en Python notar\u00e1 que no hablo en absoluto sobre temas avanzados como descriptores o m\u00e9todos de acceso a atributos ( __getattr__ , __setattr__ ). He descubierto, a trav\u00e9s de la experiencia, que esto es demasiada sobrecarga mental para los estudiantes que toman el curso de introducci\u00f3n. La cabeza de todos ya est\u00e1 al borde de explotar en este punto y si hablas sobre c\u00f3mo funcionan algo como los descriptores, los perder\u00e1s por el resto del d\u00eda, si no por el resto del curso. Gu\u00e1rdalo para un curso de \"Python avanzado\". Si est\u00e1s mirando el reloj pensando \"No hay manera de que vaya a terminar este curso\", puedes saltarte la secci\u00f3n 5 por completo.","title":"Secci\u00f3n 5: Dentro de los objetos"},{"location":"InstructorNotes/#seccion-6-generadores","text":"El objetivo principal de esta secci\u00f3n es presentar los generadores como una forma de definir iteraciones personalizadas y utilizarlos para diversos problemas relacionados con el manejo de datos. Los ejercicios del curso hacen que los estudiantes analicen transmisiones de datos en forma de actualizaciones de stock que se escriben en un archivo de registro. Hay dos grandes ideas que destacar. Primero, los generadores se pueden utilizar para escribir c\u00f3digo basado en el procesamiento incremental. Esto puede ser muy \u00fatil para cosas como la transmisi\u00f3n de datos o conjuntos de datos enormes que son demasiado grandes para quepa en la memoria de una sola vez. La segunda idea es que se pueden encadenar generadores/iteradores para crear canales de procesamiento (algo as\u00ed como las tuber\u00edas de Unix). Nuevamente, esta puede ser una forma realmente poderosa de procesar y pensar en transmisiones, conjuntos de datos grandes, etc. Algunas omisiones: aunque se describe el protocolo de iteraci\u00f3n, las notas no detallan la creaci\u00f3n de objetos iterables (es decir, clases con __iter__() y next() ). En la pr\u00e1ctica, he descubierto que no es necesario hacer esto tan a menudo (los generadores suelen ser mejores/m\u00e1s f\u00e1ciles). Por lo tanto, en aras del tiempo, he tomado la decisi\u00f3n consciente de omitirlo. Tampoco se incluyen los generadores extendidos (corrutinas) ni los usos de los generadores para la concurrencia (tasklets, etc.). Eso es mejor que se trate en cursos avanzados.","title":"Secci\u00f3n 6: Generadores"},{"location":"InstructorNotes/#seccion-7-temas-avanzados","text":"B\u00e1sicamente, esta secci\u00f3n es una variedad de temas m\u00e1s avanzados que podr\u00edan haberse tratado antes, pero no se hicieron por varias razones relacionadas con el flujo del curso y el contenido de los ejercicios del curso. Si quieres saber, sol\u00eda presentar este material antes en el curso, pero ya estaba sobrecargado con suficiente informaci\u00f3n. Volver a \u00e9l m\u00e1s tarde parece funcionar mejor, especialmente porque a esta altura, todos est\u00e1n mucho m\u00e1s familiarizados con el trabajo en Python y comienzan a entenderlo. Los temas incluyen argumentos de funciones vari\u00e1dicas (*args, **kwargs), lambda, cierres y decoradores. La discusi\u00f3n de decoradores es solo una peque\u00f1a pista de lo que es posible con la metaprogramaci\u00f3n. Si\u00e9ntete libre de decir m\u00e1s sobre lo que es posible, \u00a1pero probablemente me mantendr\u00eda alejado de las metaclases! \u00daltimamente, he estado demostrando \"numba\" como un ejemplo de un decorador m\u00e1s interesante. Si tiene poco tiempo, puede omitir la mayor parte de la secci\u00f3n 7 o comprimirla en gran medida (por ejemplo, puede omitir ejercicios).","title":"Secci\u00f3n 7: Temas avanzados"},{"location":"InstructorNotes/#seccion-8-pruebas-y-depuracion","text":"El objetivo principal de esta secci\u00f3n es simplemente presentar varias herramientas y t\u00e9cnicas relacionadas con las pruebas, la depuraci\u00f3n y el desarrollo de software. Muestre a todos el m\u00f3dulo unittest. Presente el m\u00f3dulo de registro. Discuta las afirmaciones y la idea de los \"contratos\". Muestre a las personas el depurador y el generador de perfiles. La mayor parte de esto se explica por s\u00ed solo.","title":"Secci\u00f3n 8: Pruebas y depuraci\u00f3n"},{"location":"InstructorNotes/#seccion-9-paquetes","text":"En este punto, los estudiantes han escrito una variedad de archivos (pcost.py, report.py, fileparse.py, tableformat.py, stock.py, portfolio.py, follow.py, etc.). Dos objetivos principales en esta secci\u00f3n. Primero, poner todo el c\u00f3digo en una estructura de paquete Python. Esta es solo una introducci\u00f3n suave a eso, pero mover\u00e1n los archivos a un directorio y todo se romper\u00e1. Tendr\u00e1n que corregir sus declaraciones de importaci\u00f3n (importaciones relativas a paquetes) y tal vez modificar un archivo __init__.py . Segundo objetivo: escribir un archivo setup.py simple que puedan usar para empaquetar el c\u00f3digo y d\u00e1rselo a alguien. Eso es todo. Fin del curso. Contenido","title":"Secci\u00f3n 9: Paquetes"},{"location":"about/","text":"About Esta es una versi\u00f3n en Espa\u00f1ol del curso Practical Python Programming","title":"About"},{"location":"about/#about","text":"Esta es una versi\u00f3n en Espa\u00f1ol del curso Practical Python Programming","title":"About"}]}